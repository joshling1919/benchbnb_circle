# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.5-node-browsers
        environment:
          PGHOST: 127.0.0.1
          PGUSER: bench_bnb
          RAILS_ENV: test
      - image: circleci/postgres:9.5-alpine
        environment:
          POSTGRES_USER: bench_bnb

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/

    working_directory: ~/benchbnb_circle

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run:
          name: Set Up Database
          command: bundle exec rake db:create && bundle exec rake db:schema:load

      # run tests!
      - run:
          name: run tests
          command: bundle exec rspec

  deploy-staging:
    working_directory: ~/progress-tracker
    docker:
      - image: circleci/ruby:2.3-node-browsers
    steps:
      - checkout
      - run:
          name: Deploy Staging
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_STAGING_APP_NAME.git staging:master

  deploy-production:
    working_directory: ~/progress-tracker
    docker:
      - image: circleci/ruby:2.3-node-browsers
    steps:
      - checkout
      - run:
          name: Deploy to Production
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy-staging:
          requires:
            - build
          filters:
            branches:
              only: staging
      - deploy-production:
          requires:
            - build
          filters:
            branches:
              only: master
